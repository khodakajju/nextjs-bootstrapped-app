{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/context/CreditPartyContext.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { CreditParty, Payment } from '@/lib/credit-party';\n\ninterface CreditPartyContextType {\n  creditParties: CreditParty[];\n  payments: Payment[];\n  addCreditParty: (party: Omit<CreditParty, 'id' | 'remainingBalance'>) => void;\n  updateCreditParty: (id: string, updates: Partial<CreditParty>) => void;\n  addPayment: (payment: Omit<Payment, 'id'>) => void;\n  removePayment: (id: string) => void;\n  getCreditPartyById: (id: string) => CreditParty | undefined;\n  getPaymentsByPartyId: (partyId: string) => Payment[];\n  getTotalOutstanding: () => number;\n  getTotalPaid: () => number;\n  getOverdueParties: () => CreditParty[];\n}\n\nconst CreditPartyContext = createContext<CreditPartyContextType | undefined>(undefined);\n\ninterface CreditPartyProviderProps {\n  children: ReactNode;\n}\n\nexport const CreditPartyProvider: React.FC<CreditPartyProviderProps> = ({ children }) => {\n  const [creditParties, setCreditParties] = useState<CreditParty[]>([]);\n  const [payments, setPayments] = useState<Payment[]>([]);\n\n  // Load data from localStorage on mount\n  useEffect(() => {\n    try {\n      const savedParties = localStorage.getItem('creditParties');\n      const savedPayments = localStorage.getItem('payments');\n      \n      if (savedParties) {\n        setCreditParties(JSON.parse(savedParties));\n      }\n      if (savedPayments) {\n        setPayments(JSON.parse(savedPayments));\n      }\n    } catch (error) {\n      console.error('Error loading data from localStorage:', error);\n    }\n  }, []);\n\n  // Save data to localStorage whenever it changes\n  useEffect(() => {\n    try {\n      localStorage.setItem('creditParties', JSON.stringify(creditParties));\n      localStorage.setItem('payments', JSON.stringify(payments));\n    } catch (error) {\n      console.error('Error saving data to localStorage:', error);\n    }\n  }, [creditParties, payments]);\n\n  const addCreditParty = (partyData: Omit<CreditParty, 'id' | 'remainingBalance'>) => {\n    try {\n      const newParty: CreditParty = {\n        ...partyData,\n        id: Date.now().toString() + Math.random().toString(36).substr(2, 9),\n        remainingBalance: partyData.totalCreditAmount\n      };\n      setCreditParties(prev => [...prev, newParty]);\n    } catch (error) {\n      console.error('Error adding credit party:', error);\n    }\n  };\n\n  const updateCreditParty = (id: string, updates: Partial<CreditParty>) => {\n    try {\n      setCreditParties(prev => \n        prev.map(party => \n          party.id === id ? { ...party, ...updates } : party\n        )\n      );\n    } catch (error) {\n      console.error('Error updating credit party:', error);\n    }\n  };\n\n  const addPayment = (paymentData: Omit<Payment, 'id'>) => {\n    try {\n      const newPayment: Payment = {\n        ...paymentData,\n        id: Date.now().toString() + Math.random().toString(36).substr(2, 9)\n      };\n      \n      setPayments(prev => [...prev, newPayment]);\n      \n      // Update remaining balance for the credit party\n      setCreditParties(prev => \n        prev.map(party => {\n          if (party.id === paymentData.creditPartyId) {\n            const amountChange = paymentData.type === 'payment' \n              ? -paymentData.amount \n              : paymentData.amount;\n            return {\n              ...party,\n              remainingBalance: Math.max(0, party.remainingBalance + amountChange)\n            };\n          }\n          return party;\n        })\n      );\n    } catch (error) {\n      console.error('Error adding payment:', error);\n    }\n  };\n\n  const removePayment = (id: string) => {\n    try {\n      const paymentToRemove = payments.find(p => p.id === id);\n      if (!paymentToRemove) return;\n\n      setPayments(prev => prev.filter(p => p.id !== id));\n      \n      // Revert the balance change\n      setCreditParties(prev => \n        prev.map(party => {\n          if (party.id === paymentToRemove.creditPartyId) {\n            const amountChange = paymentToRemove.type === 'payment' \n              ? paymentToRemove.amount \n              : -paymentToRemove.amount;\n            return {\n              ...party,\n              remainingBalance: Math.max(0, party.remainingBalance + amountChange)\n            };\n          }\n          return party;\n        })\n      );\n    } catch (error) {\n      console.error('Error removing payment:', error);\n    }\n  };\n\n  const getCreditPartyById = (id: string): CreditParty | undefined => {\n    return creditParties.find(party => party.id === id);\n  };\n\n  const getPaymentsByPartyId = (partyId: string): Payment[] => {\n    return payments.filter(payment => payment.creditPartyId === partyId);\n  };\n\n  const getTotalOutstanding = (): number => {\n    return creditParties.reduce((total, party) => total + party.remainingBalance, 0);\n  };\n\n  const getTotalPaid = (): number => {\n    return payments\n      .filter(p => p.type === 'payment')\n      .reduce((total, payment) => total + payment.amount, 0);\n  };\n\n  const getOverdueParties = (): CreditParty[] => {\n    const today = new Date();\n    return creditParties.filter(party => {\n      if (!party.dueDate || party.remainingBalance <= 0) return false;\n      return new Date(party.dueDate) < today;\n    });\n  };\n\n  const value: CreditPartyContextType = {\n    creditParties,\n    payments,\n    addCreditParty,\n    updateCreditParty,\n    addPayment,\n    removePayment,\n    getCreditPartyById,\n    getPaymentsByPartyId,\n    getTotalOutstanding,\n    getTotalPaid,\n    getOverdueParties\n  };\n\n  return (\n    <CreditPartyContext.Provider value={value}>\n      {children}\n    </CreditPartyContext.Provider>\n  );\n};\n\nexport const useCreditParties = (): CreditPartyContextType => {\n  const context = useContext(CreditPartyContext);\n  if (context === undefined) {\n    throw new Error('useCreditParties must be used within a CreditPartyProvider');\n  }\n  return context;\n};\n"],"names":[],"mappings":"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","debugId":null}}]
}